/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package inheritance;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {
    @Test void someLibraryMethodReturnsTrue() {
        Library classUnderTest = new Library();
        assertTrue(classUnderTest.someLibraryMethod(), "someLibraryMethod should return 'true'");
    }

    @Test void testingRestaurantClass(){

        // resturant test without review
        Restaurant testRestaurant = new Restaurant("SubWay",5);
        assertEquals("SubWay",testRestaurant.getName());
        assertEquals(5,testRestaurant.getPriceCat());
        assertEquals("Restaurant{Name='SubWay',Rate out of 5 stars=0.0, Price Category=5.0$, reviews=[]}" , testRestaurant.toString());


        //review test
        Review testReview = new Review("testing", "i love it",4);
        assertEquals("testing ( said: i love it, and rate it with =4.0 stars ",testReview.toString());


        // addReview method test
        testRestaurant.addReview("mosa","i like it",3);
        assertEquals("Restaurant{Name='SubWay',Rate out of 5 stars=3.0, Price Category=5.0$, reviews=[mosa ( said: i like it, and rate it with =3.0 stars ]}" , testRestaurant.toString());
    }


    @Test void shopClassTest(){
        // basic shop test
        Shop newShop = new Shop("Target","All things you need",4);
        assertEquals("Shop{name='Target', description='All things you need', stars=0.0, dollarSigns='$$$$', reviews=[]}",newShop.toString());

        // adding review for shop
        newShop.shopReview("mosa","i like this place",4);
        assertEquals("Shop{name='Target', description='All things you need', stars=4.0, dollarSigns='$$$$', reviews=[mosa ( said: i like this place, and rate it with =4.0 stars ]}",newShop.toString());
    }

    @ Test void theaterClassTest(){
        // basic theater class test
        Theater newTheater = new Theater("cima");
        assertEquals("Theater{name='cima', stars=0.0, movies=[], reviews=[]}",newTheater.toString());

        // adding movies test
        newTheater.addMovie("Inception");
        newTheater.addMovie("Shutter island");
        assertEquals("Theater{name='cima', stars=0.0, movies=[Inception, Shutter island], reviews=[]}",newTheater.toString());


        // remove movie test
        newTheater.removeMovie("Shutter island");
        assertEquals("Theater{name='cima', stars=0.0, movies=[Inception], reviews=[]}",newTheater.toString());


        // test adding a review without mentioning movie name
        newTheater.addReview("mosa","i like the theater design",5);
        assertEquals("Theater{name='cima', stars=5.0, movies=[Inception], reviews=[mosa ( said: i like the theater design, and rate it with =5.0 stars ]}",newTheater.toString());


        //adding a review with mention a movie name
        newTheater.addReview("somebody","nice movie i love it",4,"inception");
        assertEquals("Theater{name='cima', stars=4.5, movies=[Inception], reviews=[mosa ( said: i like the theater design, and rate it with =5.0 stars , somebody ( said: nice movie i love it, and rate it with =4.0 stars ,movie name: inception)]}",newTheater.toString());

    }

}
